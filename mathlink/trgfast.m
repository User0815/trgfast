(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



BeginPackage["TRGFast`"];


(*Usage goes here*)
trgfast::usage="Maps the linear power spectrum to the nonlinear power spectrum";
trgA::usage="Returns the function A for a given power spectrum";
TRGMode::usage = "Specifies in which mode to solve the TRG equations (Default: \"Full\")";
Linear::usage = "Specifies whether to use the linear or nonlinear TRG equations (Default: False)";
Nq::usage = "The amount of sampling points to be used for the integrand of A(k) (Default: 200)";
kTh::usage = "The threshold wavenumber after which we change the sampling scheme for Kdq(q) (Default: 1)";
kLinear::usage = "The wavenumber before which we assume A(k)=0 (Default: .001)";
RKTol::usage = "Tolerance value for the Runge-Kutta integrator (Default: .001)";
RKThresh::usage = "Threshold value for the Runge-Kutta integrator (Default: .001)";
ScaleA::usage= "Scale factor for A. Only for debugging reasons. (Default: 1.0)";
ExtrapolationMethod::usage="Specifies how to extrapolate the power spectrum in the UV limit. Options: \"PowerLaw\", \"Exponential\" (Default), \"Zero\", \"Const\"";
Verbosity::usage="Specifies the verbosity level on stdout";
GrowthLen::usage="Number of sampling points for the growth function (Default: 100, max: 500)";
DumpDir::usage="Specifies the postfix n of the directory (/tmp/trgfast-n) in which intermediate data structures will be dumped, if requested (Default: 0)";
WantKdq::usage="When set to True, trgfast will dump the function Kdq(q,k) to the specified output directory";
WantA::usage="When set to True, trgfast will dump the function A(k) to the specified output directory";
WantPS::usage="When set to True, trgfast will dump the Power Spectrum at all time steps to the specified output directory";
WantIM::usage="When set to True, trgfast will dump the integrated moments at all time steps to the specified output directory"
WantDiff::usage="When set to True, trgfast will dump the function diff(q,k) to the specified output directory";
WantRawPS::usage="When set to True, trgfast will dump the raw power spectrum values (without interpolation) to the specified output directory";
UseSymmetry::usage="Exploits one more non-obvious symmetry (Default: True)";
TimeSteps::usage="Number of time steps for the nonadaptive RK integrator. The adaptive version will be used if this value is negative. (Default: -1)";
CurvLimit::usage="Sets the allowed curvature tolerance (Default: 10)";
SlopeLimit::usage="Sets the allowed maximum slope (Default: 10)";
SamplingOffset::usage="Sets the offset from the near-singularity when sampling Kdq (Default: .0001)";


trg::linke = "The MathLink has died. The TRG program probably crashed.";
trg::psinc = "The provided power spectrum is incompatible. It must be an ascending list of pairs {\!\(\*SubscriptBox[\(k\), \(i\)]\),P(\!\(\*SubscriptBox[\(k\), \(i\)]\))}.";
trg::backgr = "The background functions are not defined properly.";
trg::baddir="Directory '`1`' not found."
trg::invopt="Invalid option: `1`"


Begin["`Private`"];


$location=DirectoryName[$InputFileName];


issorted[list_]:=(i=1;While[i<Length@list,If[list[[i]]>=list[[i+1]],Return[False]];i++];Return[True]);


trgdefaults={.001,.1,200,.01,.001,30,False,100,2,0,False,False,False,False,False,False,1,10,20,True,"PowerLaw",.0001};
trgoptions={kLinear,kTh,Nq,RKTol,RKThresh,TimeSteps,Linear,GrowthLen,Verbosity,DumpDir,WantPS,WantRawPS,WantIM,WantDiff,WantA,WantKdq,ScaleA,CurvLimit,SlopeLimit,UseSymmetry,ExtrapolationMethod,SamplingOffset};
trgoptiondefaults=Rule@@@Transpose[{trgoptions,trgdefaults}];
trgoptionssubs={False->-1,True->1,"PowerLaw"->0,"Zero"->1,"Exponential"->2,"Const"->3};


trgfast[ps_,zini_,zfin_,O21_,O22_,opts:OptionsPattern[trgoptiondefaults]]:=
Module[{link,pslin,psnl,eta,etatab,Omegatab,aini,options,growth,result,ktab},

aini=1/(zini+1);
eta=Sort@Log[(zini+1.)/(zfin+1)];
If[Length@eta==0,eta={eta}];
etatab = N@Range[0.,-Log@aini,.05];
ktab={.1};(*no kdependence*)

If[Quiet@NumericQ[Check[O21[First@etatab],Null]]&&Quiet@NumericQ[Check[O22[First@etatab],Null]],
Omegatab =N@Join[ O21/@etatab,O22/@etatab],
If[Quiet@NumericQ[Check[O21[First@etatab,First@ktab],Null]]&&Quiet@NumericQ[Check[O22[First@etatab,First@ktab],Null]],
(*in this case we do have k-dependence*)
ktab=10^Range[Log@Min@First@Transpose@ps,Log@Max@First@Transpose@ps,.1];
Omegatab=N@Flatten@Transpose[Transpose/@Table[{O21[e,k],O22[e,k]},{k,ktab},{e,etatab}]],
Message[trg::backgr];Return[$Failed];Abort[]];
];
pslin=Check[N@Flatten[Transpose@Sort@ps],Return[$Failed];Abort[]];
options=N@Join[{-1}(*non-default options*),
OptionValue@trgoptions/.trgoptionssubs];

If[!And@@NumericQ/@options,Message[trg::invopt,ToString[trgoptions[[First@Position[NumericQ/@options,False]]]];Return[$Failed];Abort[]]];

link=Install[$location<>"trg_link"];
If[link==$Failed,Return[$Failed];Abort[]];
result=Global`trgEvolution[
{0.}~Join~eta,
pslin,
etatab,
ktab,(*TODO kdependence*)
Omegatab,
options];

Uninstall[link];
If[result==$Failed||!NumericQ@First@Flatten@result,Return[$Failed];Abort[]];

(*format the output*)
{psnl,growth}=result;
psnl=Partition[psnl,Length@psnl/Length@zfin];
psnl=Table[Select[Transpose@Partition[p,Length@p/4],First@#>0&],{p,psnl}];
growth=Select[growth,NonNegative];
growth=Transpose[Partition[growth, Length@growth/2]];
{psnl,growth}
]


trgA[ps_,krange_,opts:OptionsPattern[trgoptiondefaults]]:=Module[{link,result,options,klist,PS11,PS12,PS22},

options=N@Join[{-1},
OptionValue@trgoptions/.{False->-1,True->1}];

Check[{klist,PS11,PS12,PS22}=Transpose@ps,Return[$Failed];Abort[]];

link=Install[$location<>"trg_link"];
If[link==$Failed,Return[$Failed];Abort[]];
Global`InitA[Log@Flatten[{klist,PS11,PS12,PS22}],options];
result=Table[Flatten@{k,Global`A[k]},{k,krange}];
Global`CleanUpA[];
Uninstall[link];
If[result==$Failed,Return[$Failed];Abort[]];

result
];
trgA[ps_,opts:OptionsPattern[trgoptions]]:=trgA[ps,First@Transpose@ps,opts];


(*work in progress*)
trgRHS[opts:OptionsPattern[trgoptions]]:=Module[{},
link=Install[$location<>"trg_link"];
If[link==$Failed,Return[$Failed];Abort[]];
Global`InitOde[Log@Flatten[{klist,PS11,PS12,PS22}],options];
result=fOde[];
Global`CleanUpOde[];
Uninstall[link];
If[result==$Failed,Return[$Failed];Abort[]];
]


End[];
EndPackage[];
